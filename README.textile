h1. iYQL - Interactive YQL

The purpose of this project is to implement a CLI (commend-line interface) for "YQL":http://developer.yahoo.com/yql/. The goal is to implement something similar to databases like "sqlite3":http://www.sqlite.org or "mysql":http://www.mysql.com commend-line interfaces.

h2. 1. Input

There are two major modes of operation. The first one is the interactive one, which is started by default. Using haskeling [readline-like library], it reads one command at time, each command ending by ; (mandatory). This statement is parsed in order to determine which type of authentication is required [among other things] -- either none, two legged or three legged. After the proper oauth token is acquired, the query is sent to yql and the result is shown to the user.

The other mode is the batch mode, which queries are from an argument (-e). This is most useful for piping data in or using iyql to feed other programs in the pipeline.

h2. 2. Output

The default is printing the output as-is. The local functions .json() and .request() may also be used to change this to json. XMLs are automatically pretty printed, so you may expect it to be, et least, well indented.

h2. 3. Local and Remote

Local functions starts by . (dot). Local functions are functions that either a) change the request, b) modify the response or c) transform the output. For instance, the .request() function allow you to change the request parameter, for instance, setting diagnostics on or changing the format to json. .json() and .diagnostics() are aliases to this function. The .tables() function reads the XML and attempt to display it in a tabular format, very similar to what sqlite3 does.

There are also commands. Currently the only command implemented is :quit.

h2. 4. Examples

h3. 4.1. Simple SELECT:

<pre><code>iyql> select * from meme.info where name="dsouza";</code></pre>
  * Screenshot: "1-simple-select.png":http://github.com/guilhermechapiewski/iyql/raw/master/screenshots/1-simple-select.png

h3. 4.2. Local ".json()" function:

Transforms the results to "JSON":http://www.json.org format:

<pre><code>iyql> select * from meme.info where name="dsouza" | .json();</code></pre>
  * Screenshot: "2-local-json-function.png":http://github.com/guilhermechapiewski/iyql/raw/master/screenshots/2-local-json-function.png

h3. 4.3. Local ".tables()" function:

Transforms the results to a table-like format (similar to MySQL):

<pre><code>iyql> select guid,pubid from meme.posts where owner_guid="XYZXPTOETCXYZXPTOETC" | .tables();</code></pre>
  * Screenshot: "3-local-tables-function.png":http://github.com/guilhermechapiewski/iyql/raw/master/screenshots/3-local-tables-function.png

h3. 4.4. Extense SELECT using ".tables()" function:

<pre><code>iyql> select guid,following,followers,name,title from meme.info where name in ("dsouza","julcirocha","meme") | .tables();</code></pre>
  * Screenshot: "4-extense-select.png":http://github.com/guilhermechapiewski/iyql/raw/master/screenshots/4-extense-select.png

h2. 5. Installing

_* "test-framework-hunit" is only needed if you want to execute "make test" before installing._

h3. 5.1. Install dependencies - MacOS

Install the following using macports:

<pre><code>
$ sudo port install haskell-platform
$ sudo port install hs-haskeline
$ sudo port install curl
</code></pre>

Install the following dependencies using "Cabal":http://www.haskell.org/cabal/:

<pre><code>
$ cabal install hoauth (>= 0.2.5)
$ cabal install xml
$ cabal install test-framework-hunit
</code></pre>

h3. 5.2. Install dependencies - Debian

<pre><code>
$ sudo apt-get install cabal-install libghc6-curl-dev libghc6-parsec2-dev libghc6-haskeline-dev
$ cabal install hoauth (>= 0.2.5)
$ cabal install xml
$ cabal install test-framework-hunit
</code></pre>

h3. 5.3. Compile and Install

<pre><code>
$ make
$ sudo make install
</code></pre>

_* "make install" will copy the "iyql" binary to your /usr/local/bin directory._

h2. 6. Using

When iyql is started it attempts to read the file $HOME/.iyql/cfg. This file should contains the oauth credentials (consumer secret and consumer key) in order to execute three legged oauth requests. Following there is an example of this file:
<pre><code>
-- Lines starting with -- are considered comments
-- Attributes keys are strings with any character but `:' (COLON)
-- Attributes values are any strings with any character but `\n' (LF)

-- Refer to http://developer.yahoo.com/dashboard/ in order to create/read yours keys
oauth_consumer_key: my_consumer_key
oauth_consumer_sec: my_consumer_secret
</code></pre>

This file is optional. However, without this you will only be able to perform unauthenticated requests (tables that contains security="ANY").
