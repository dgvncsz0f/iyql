h1. iYQL - Interactive YQL

The purpose of this project is to implement a CLI (commend-line interface) for "YQL":http://developer.yahoo.com/yql/. The goal is to implement something similar to databases like "sqlite3":http://www.sqlite.org or "mysql":http://www.mysql.com commend-line interfaces.

h2. 1. Input

There are two major modes of operation. The first one is the interactive one, which is started by default. Using libreadline, it reads one command at time, each command ending by ; (mandatory). This statement is parsed in order to determine which type of authentication is required -- either none, two legged or three legged. After the proper oauth token is acquired, the query is sent to yql and the result is shown to the user.

The other mode is the batch mode, which queries are read either from stdin or from an argument. This is most useful for piping data into the program or using iyql to feed other programs in the unix pipeline.

h2. 2. Output

The idea is also parse the output and print it in a structured format, similar to what database interfaces do. However, the first release is planned to display the output as-is, and parsing and changing the output is scheduled for a second release.

h2. 3. Local and Remote

There will be local commands, that are useful to inspect the state of the program. Local commands will always be prefixed by the . character. For instance .whoami shows information about the oauth"token in use. These commands are processed locally and never sent to YQL. Everything not starting by `.' is considered to be a valid YQL statement, parsed and sent to YQL engine.

h2. 4. Examples

h3. 4.1. Simple SELECT:

<pre><code>iyql> select * from meme.info where name="dsouza";</code></pre>
  * Screenshot: "1-simple-select.png":http://github.com/guilhermechapiewski/iyql/raw/master/screenshots/1-simple-select.png

h3. 4.2. Local ".json()" function:

Transforms the results to "JSON":http://www.json.org format:

<pre><code>iyql> select * from meme.info where name="dsouza" | .json();</code></pre>
  * Screenshot: "2-local-json-function.png":http://github.com/guilhermechapiewski/iyql/raw/master/screenshots/2-local-json-function.png

h3. 4.3. Local ".tables()" function:

Transforms the results to a table-like format (similar to MySQL):

<pre><code>iyql> select guid,pubid from meme.posts where owner_guid="XYZXPTOETCXYZXPTOETC" | .tables();</code></pre>
  * Screenshot: "3-local-tables-function.png":http://github.com/guilhermechapiewski/iyql/raw/master/screenshots/3-local-tables-function.png

h3. 4.4. Extense SELECT using ".tables()" function:

<pre><code>iyql> select guid,following,followers,name,title from meme.info where name in ("dsouza","julcirocha","meme") | .tables();</code></pre>
  * Screenshot: "4-extense-select.png":http://github.com/guilhermechapiewski/iyql/raw/master/screenshots/4-extense-select.png

h2. 5. Installing

_* "test-framework-hunit" is only needed if you want to execute "make test" before installing._

h3. 5.1. Install dependencies - MacOS

Install the following using macports:

<pre><code>
$ sudo port install haskell-platform
$ sudo port install hs-haskeline
$ sudo port install curl
</code></pre>

Install the following dependencies using "Cabal":http://www.haskell.org/cabal/:

<pre><code>
$ cabal install hoauth (>= 0.2.5)
$ cabal install xml
$ cabal install test-framework-hunit
</code></pre>

h3. 5.2. Install dependencies - Debian

<pre><code>
$ sudo apt-get install cabal-install libghc6-curl-dev libghc6-parsec2-dev libghc6-haskeline-dev
$ cabal install hoauth (>= 0.2.5)
$ cabal install xml
$ cabal install test-framework-hunit
</code></pre>

h3. 5.3. Compile and Install

<pre><code>
$ make
$ sudo make install
</code></pre>

_* "make install" will copy the "iyql" binary to your /usr/local/bin directory._

h2. 6. Using

When iyql is started it attempts to read the file $HOME/.iyql/cfg. This file should contains the oauth credentials (consumer secret and consumer key) in order to execute three legged oauth requests. Following there is an example of this file:
<pre><code>
-- Lines starting with -- are considered comments
-- Attributes keys are strings with any character but `:' (COLON)
-- Attributes values are any strings with any character but `\n' (LF)

-- Refer to http://developer.yahoo.com/dashboard/ in order to create/read yours keys
oauth_consumer_key: my_consumer_key
oauth_consumer_sec: my_consumer_secret
</code></pre>

This file is optional. However, without this you will only be able to perform unauthenticated requests (tables that contains security="ANY").
